package application;

import javafx.fxml.FXML;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.paint.Color;
import application.SplayTree.Node;
import javafx.event.ActionEvent;
import javafx.scene.control.RadioButton;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;

import javax.swing.JOptionPane;

class SplayTreee {
    class Node {
        int key;
        Node left, right;

        public Node(int item) {
            key = item;
            left = right = null;
        }
    }

    private Node root;

    public SplayTreee() {
        root = null;
    }

    private Node rightRotate(Node x) {
        Node y = x.left;
        x.left = y.right;
        y.right = x;
        return y;
    }

    private Node leftRotate(Node x) {
        Node y = x.right;
        x.right = y.left;
        y.left = x;
        return y;
    }

    private Node splay(Node root, int key) {
        if (root == null || root.key == key)
            return root;

        if (root.key > key) {
            if (root.left == null) return root;

            if (root.left.key > key) {
                root.left.left = splay(root.left.left, key);
                root = rightRotate(root);
            } else if (root.left.key < key) {
                root.left.right = splay(root.left.right, key);
                if (root.left.right != null)
                    root.left = leftRotate(root.left);
            }

            return (root.left == null) ? root : rightRotate(root);
        } else {
            if (root.right == null) return root;

            if (root.right.key > key) {
                root.right.left = splay(root.right.left, key);
                if (root.right.left != null)
                    root.right = rightRotate(root.right);
            } else if (root.right.key < key) {
                root.right.right = splay(root.right.right, key);
                root = leftRotate(root);
            }

            return (root.right == null) ? root : leftRotate(root);
        }
    }

    public void insert(int key) {
        if (root == null) {
            root = new Node(key);
            return;
        }
        root = splay(root, key);
        if (root.key == key) return;

        Node newNode = new Node(key);
        if (root.key > key) {
            newNode.right = root;
            newNode.left = root.left;
            root.left = null;
        } else {
            newNode.left = root;
            newNode.right = root.right;
            root.right = null;
        }
        root = newNode;
    }

    public void delete(int key) {
        if (root == null) return;
        root = splay(root, key);
        if (key != root.key) return;

        if (root.left == null) {
            root = root.right;
        } else {
            Node temp = root;
            root = splay(root.left, key);
            root.right = temp.right;
        }
    }

    public Node search(int key) {
        root = splay(root, key);
        return (root != null && root.key == key) ? root : null;
    }

    public void inorder() {
        inorderHelper(root);
    }

    private void inorderHelper(Node root) {
        if (root != null) {
            inorderHelper(root.left);
            System.out.print(root.key + " ");
            inorderHelper(root.right);
        }
    }
}



public class LandingPageController {
	@FXML
	private TextField takeData;
	@FXML
	private RadioButton pressSearch;
	@FXML
	private ToggleGroup selectOpt;
	@FXML
	private RadioButton pressInsert;
	@FXML
	private RadioButton pressDelete;
	@FXML
	private Canvas myCanvas;

	// Event Listener on RadioButton[#pressSearch].onAction
	@FXML
	public void SearchPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on RadioButton[#pressInsert].onAction
	@FXML
	public void InsertPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on RadioButton[#pressDelete].onAction
	@FXML
	public void DeletePressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onAction
	@FXML
	public void extBtn(ActionEvent event) {
		
		// TODO Autogenerated
		if (!takeData.getText().isEmpty()){
			if (pressSearch.isSelected()) {
	            System.out.println("Search is selected.");
	            String input = takeData.getText();
	            int[] numbers = convertInputToNumbers(input);
	            SplayTree tree = new SplayTree();
	            for(int i:numbers) {
	            	tree.insert(i);
	            }
	            drawTree();
	            
	            
	        }
			if (pressInsert.isSelected()) {
	            System.out.println("Insert is selected.");
	        }
			if (pressDelete.isSelected()) {
	            System.out.println("Delete is selected.");
	        }
			else {
				System.out.println("Traversing is selected.");
			}
		}
		else {
			System.out.println("Kindly,Enter data.");
		}
		
		
       
	}
	
	private int[] convertInputToNumbers(String input) {
        String[] parts = input.split("\\s+");
        int[] numbers = new int[parts.length];
        for (int i = 0; i < parts.length; i++) {
            try {
                numbers[i] = Integer.parseInt(parts[i]);
            } catch (NumberFormatException e) {
                e.printStackTrace();
                // Handle the error: you might want to show an alert or a message to the user
            }
        }
        return numbers;
    }
	// Event Listener on Button.onAction
	@FXML
	public void clearBtn(ActionEvent event) {
		// TODO Autogenerated
		takeData.clear();
		pressSearch.setSelected(false);
        pressInsert.setSelected(false);
        pressDelete.setSelected(false);
	}
	
	
	 private void drawTree() {
	        GraphicsContext gc = myCanvas.getGraphicsContext2D();
	        gc.clearRect(0, 0, myCanvas.getWidth(), myCanvas.getHeight());
	        drawNode(gc, 400, 50, 200, "Root");
	    }

	    private void drawNode(GraphicsContext gc, double x, double y, double hGap, String value) {
	        gc.setStroke(Color.BLACK);
	        gc.setFill(Color.AQUA);
	        gc.fillOval(x - 15, y - 15, 30, 30);
	        gc.strokeText(value, x - 10, y + 5);

	        // Example nodes for demonstration purposes
	        if (hGap > 20) {
	            gc.strokeLine(x, y, x - hGap, y + 50);
	            drawNode(gc, x - hGap, y + 50, hGap / 2, "L");
	            gc.strokeLine(x, y, x + hGap, y + 50);
	            drawNode(gc, x + hGap, y + 50, hGap / 2, "R");
	        }
	    }
}
